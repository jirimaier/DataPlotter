name: Build and Deploy DataPlotter on Windows

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python and Qt Installer
      run: |
        python -m pip install --upgrade pip
        python -m pip install aqtinstall
      shell: cmd

    - name: Cache Qt installation
      uses: actions/cache@v3
      with:
        path: D:/a/DataPlotter/Qt
        key: qt-5.15.2-msvc2019-${{ runner.os }}
        restore-keys: qt-5.15.2-msvc2019-

    - name: Install Qt 5.15.2 with Required Modules
      run: |
        python -m aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 --outputdir D:/a/DataPlotter/Qt --archives qtbase qtserialport qtprintsupport qtopengl qtdeclarative qtquickcontrols2 qtnetwork qttools
      shell: cmd

    - name: Install dependencies with vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        cd C:/vcpkg
        bootstrap-vcpkg.bat
        vcpkg integrate install
        vcpkg install ninja
        vcpkg install cmake
      shell: cmd

    - name: Cache OpenSSL installation
      uses: actions/cache@v3
      with:
        path: C:/Program Files/OpenSSL
        key: openssl-choco-${{ runner.os }}

    - name: Install OpenSSL (if not cached)
      if: steps.cache-openssl.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        choco install openssl -y

    - name: Add Qt bin directory to PATH
      shell: bash
      run: |
        echo "D:/a/DataPlotter/Qt/5.15.2/msvc2019_64/bin" >> $GITHUB_PATH

    - name: Set up MSVC environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Configure CMake
      run: |
        cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="D:/a/DataPlotter/Qt/5.15.2/msvc2019_64/lib/cmake"
      shell: cmd

    - name: Build project
      run: cmake --build build --config Release
      shell: cmd

    - name: Run deployment script
      run: |
        python deploy_windows/deploy.py ^
          --windeployqt "D:/a/DataPlotter/Qt/5.15.2/msvc2019_64/bin/windeployqt.exe" ^
          --inno "C:/Program Files (x86)/Inno Setup 6/ISCC.exe" ^
          --vcredist "C:/Windows/System32" ^
          --openssl "C:/Program Files/OpenSSL/bin"
      shell: cmd

    - name: Upload build artifact (exe)
      uses: actions/upload-artifact@v4
      with:
        name: DataPlotter-Windows-Installer
        path: deploy_windows/deploy/DataPlotter*.exe

    - name: Upload build artifact (zip)
      uses: actions/upload-artifact@v4
      with:
        name: DataPlotter-Windows-Portable
        path: deploy_windows/deploy/DataPlotter*.zip

    - name: Set MSIX Tool Paths
      shell: powershell
      run: |
        $sdkPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64"
        echo "MAKEAPPX_PATH=$sdkPath\MakeAppx.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "SIGNTOOL_PATH=$sdkPath\signtool.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Install dependencies
      run: |
        python -m pip install pillow

    - name: Run MSIX packaging script (without signing)
      shell: cmd
      run: |
        python deploy_windows/create_msix.py --msix_tool "%MAKEAPPX_PATH%"

    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: msix-package-for-store
        path: deploy_windows/deploy/*.msix

    - name: Sign the package with a Temporary Code-Signing Certificate
      shell: powershell
      run: |
        $cert = New-SelfSignedCertificate `
          -Type Custom `
          -Subject "CN=6F8CD499-23DE-4129-BE8E-D2503285A20A" `
          -KeyUsage DigitalSignature `
          -FriendlyName "Jiří Maier" `
          -CertStoreLocation "Cert:\CurrentUser\My" `
          -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")

        # Generate a random password
        $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 16 | ForEach-Object {[char]$_}) 

        # Convert the password to a SecureString
        $securePassword = ConvertTo-SecureString -String $password -Force -AsPlainText 

        # Export the certificate with the private key (.pfx)
        Export-PfxCertificate `
          -Cert $cert `
          -FilePath "deploy_windows/deploy/test_certificate.pfx" `
          -Password $securePassword

        # Export the certificate without the private key (.cer)
        Export-Certificate `
          -Cert $cert `
          -FilePath "deploy_windows/deploy/test_certificate.cer"

        # Sign the MSIX package
        & "${{ env.SIGNTOOL_PATH }}" sign `
          /fd SHA256 `
          /a `
          /f "deploy_windows/deploy/test_certificate.pfx" `
          /p "$password" `
          deploy_windows/deploy/*.msix

    - name: Upload Signed MSIX Package
      uses: actions/upload-artifact@v4
      with:
        name: msix-package-for-testing-signed
        path: deploy_windows/deploy/*.msix

    - name: Upload Temporary Certificate (for testing)
      uses: actions/upload-artifact@v4
      with:
        name: temporary-testing-certificate
        path: deploy_windows/deploy/test_certificate.cer
